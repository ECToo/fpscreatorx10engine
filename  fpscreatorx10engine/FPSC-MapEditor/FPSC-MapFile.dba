rem
rem MAP FILE FORMAT
rem

`
` Blank New
`

_mapfile_newmap:
 `
 rem Free arrays
 undim map()
 undim mapolay()
 undim olaylist()
 `
 rem Defaults
 layermax=20 : maxx=40 : maxy=40
 olaylistmax=100
 `
 rem Create arrays
 dim map(layermax,maxx,maxy)
 dim mapolay(layermax,maxx,maxy)
 dim olaylist(olaylistmax,50) as DWORD
 `
return

`
` Get volume values from level1 (for final games)
`

_mapfile_gettitleandloadingvolumes:
 `
 rem Extract level1 to folder
 levelmapptah$=myownrootdir$+"levelbank\testlevel\"
 gosub _mapfile_load_fpl
 `
 rem Now level is extracted, load header
 levelmapptah$=myownrootdir$+"levelbank\testlevel\"
 gosub _mapfile_loadmap
 ` 
 rem Get volume values (sets hudmusicvolume before enter FPI system)
 globaltitlepagevolume=volumemeter(0)
 globalloadingpagevolume=volumemeter(1)
 `
 rem reset variables to ensure non interference
 projectfilename$=""
 levelmapptah$=""
 `
return

`
` Load
`

_mapfile_loadmap:
 `
 rem Free arrays
 undim map()
 undim mapolay()
 undim olaylist()
 `
 rem Load header data (need main mapdata for visdata)
 filename$=levelmapptah$+"header.dat"
 if file exist(filename$)=1
  if file size(filename$)=16
   rem V-EA Header
   open to read 1,filename$
    read file 1,layermax
    read file 1,maxx
    read file 1,maxy
    read file 1,olaylistmax
   close file 1
  endif
  if file size(filename$)=32
   rem V-V1 Header
   open to read 1,filename$
    read file 1,layermax
    read file 1,maxx
    read file 1,maxy
    read file 1,olaylistmax
    read file 1,gmultiplayergame
    read file 1,temp
    read file 1,temp
    read file 1,temp
   close file 1
  endif
  if file size(filename$)>32
   rem X10 versioning
   usewaterlevelfromprevioussession#=-1
   open to read 1,filename$
    rem version number
    read file 1,x10headerversion
    rem standard
    read file 1,layermax
    read file 1,maxx
    read file 1,maxy
    read file 1,olaylistmax
    read file 1,gmultiplayergame
    read file 1,temp
    read file 1,temp
    read file 1,temp
    rem extra data
    if x10headerversion>=1
     rem x10 effects and volume values
     rem strings
     read string 1,res$ 
     read string 1,res$
     read string 1,res$
     read string 1,res$
     read string 1,res$
     rem x10effects
     for t=0 to 19
      read file 1,a : x10effectmenu(t)=a
     next t
     rem volumes
     for t=0 to 4
      read file 1,a : volumemeter(t)=a
     next t
     rem V110 - 140110 - feed volume data into soundvolumes (for initial player and entity scripts)
     if volumemeter(3)>0
      soundvolumes(0)=80+(volumemeter(3)/5)
     else
      soundvolumes(0)=0
     endif
     if volumemeter(4)>0
      soundvolumes(1)=80+(volumemeter(4)/5)
     else
      soundvolumes(1)=0
     endif    
     rem reserved
     read file 1,a : waterlevel#=a : usewaterlevelfromprevioussession#=waterlevel#
     read file 1,a
     read file 1,a
     read file 1,a
     read file 1,a
    endif
   close file 1
  endif
 else
  layermax=20 : maxx=40 : maxy=40
  olaylistmax=100
 endif
 `
 rem Create arrays
 dim map(layermax,maxx,maxy)
 dim mapolay(layermax,maxx,maxy)
 dim olaylist(olaylistmax,50) as DWORD
 `
 rem Dump main map data
 filename$=levelmapptah$+"map.fpmb"
 if file exist(filename$)=1 then load array filename$,map()
 `
 rem Dump array data
 if file exist(myownrootdir$+"mapbank\testmap\map.fpmo")=1 then load array myownrootdir$+"mapbank\testmap\map.fpmo",mapolay()
 if file exist(myownrootdir$+"mapbank\testmap\map.fpml")=1 then load array myownrootdir$+"mapbank\testmap\map.fpml",olaylist()
 `
return

`
` Save
`

_mapfile_savemap:
 `
 rem Store old folder
 old$=get dir$()
 `
 rem Enter folder
 set dir myownrootdir$+"mapbank\testmap\"
 `
 rem Clear old files out (TEMP)
 `if file exist(myownrootdir$+"map.fpmb")=1 then delete file myownrootdir$+"map.fpmb"
 `if file exist(myownrootdir$+"header.dat")=1 then delete file myownrootdir$+"header.dat"
 `if file exist(myownrootdir$+"map.fpmo")=1 then delete file myownrootdir$+"map.fpmo"
 `if file exist(myownrootdir$+"map.fpml")=1 then delete file myownrootdir$+"map.fpml"
 if file exist("map.fpmb")=1 then delete file "map.fpmb"
 if file exist("header.dat")=1 then delete file "header.dat"
 if file exist("map.fpmo")=1 then delete file "map.fpmo"
 if file exist("map.fpml")=1 then delete file "map.fpml"
 `
 rem Restore
 set dir old$
 `
 rem header file write
 headername$="header.dat" : gosub _mapfile_savemap_justheader
 `
 rem Enter folder
 set dir myownrootdir$+"mapbank\testmap\"
 `
 rem Dump array data
 save array "map.fpmb",map()
 save array "map.fpmo",mapolay()
 save array "map.fpml",olaylist()
 `
 rem Restore
 set dir old$
 `
return

_mapfile_savemap_justheader:
 `
 rem Store old folder
 old$=get dir$()
 `
 rem Enter folder
 set dir myownrootdir$+"mapbank\testmap\"
 `
 rem used by test game to save the settings from the menus
 rem X10 version header (contains values from testgame menus)
 x10headerversion=1
 `
 rem Create header file
 if file exist(headername$)=1 then delete file headername$
 open to write 1,headername$
  `
  rem X10 version number
  if x10headerversion>0
   write file 1,x10headerversion
  endif
  `
  rem EA
  write file 1,layermax
  write file 1,maxx
  write file 1,maxy
  write file 1,olaylistmax
  `
  rem V1
  write file 1,gmultiplayergame
  write file 1,0
  write file 1,0
  write file 1,0
  `
  rem X10 versioning
  if x10headerversion>=1
   rem strings
   write string 1,""
   write string 1,""
   write string 1,""
   write string 1,""
   write string 1,""
   rem x10effects
   for t=0 to 19
    a=x10effectmenu(t) : write file 1,a
   next t
   rem volumes
   for t=0 to 4
    a=volumemeter(t) : write file 1,a
   next t
   rem reserved
   rem X10 - 071007 - only manual water level change can change it for level data
   if usewaterlevelfromprevioussession#<>-1
    rem if water was not manually altered (and usewaterlevelfromprevioussession# set to -1)
    rem restore it to the original water level from session before test game
    waterlevel#=usewaterlevelfromprevioussession#
   endif
   a=waterlevel# : write file 1,a
   write file 1,0
   write file 1,0
   write file 1,0
   write file 1,0
  endif
  `
 rem end of header
 close file 1
 `
 rem Restore
 set dir old$
 `
return

`
` ProjectFilename FPM Saver (ZIP)
`

_mapfile_saveproject_fpm:
 `
 rem Delete any olf file
 if file exist(projectfilename$)=1 then delete file projectfilename$
 `
 rem Copy CFG to testgame area for saving with other files
 rem 240907 - changed from get dir$() to myownrootdir$
 tttfile$="cfg.cfg"
 if file exist(myownrootdir$+"\editors\gridedit\"+tttfile$)=1
  if file exist(myownrootdir$+"mapbank\testmap\"+tttfile$)=1 then delete file myownrootdir$+"mapbank\testmap\"+tttfile$
  copy file myownrootdir$+"\editors\gridedit\"+tttfile$,myownrootdir$+"mapbank\testmap\"+tttfile$
 endif
 `
 rem Create a FPM (zipfile)
 create file block 1, projectfilename$
 set file block key 1, "mypassword"
 told$=get dir$()
 set dir myownrootdir$
 set dir "mapbank\testmap\"
 add file to block 1, "header.dat"
 add file to block 1, "map.ele"
 add file to block 1, "map.ent"
 add file to block 1, "map.seg"
 add file to block 1, "map.way"
 add file to block 1, "map.fpmb"
 add file to block 1, "map.fpmo"
 add file to block 1, "map.fpml"
 add file to block 1, "cfg.cfg"
 set dir "..\.."
 set dir told$ 
 save file block 1
 `
return

_mapfile_loadgamemap_fpm:
 `
 rem FPM for level loaded into mapbank\testmap
 projectfilename$=myownrootdir$+"\"+level$(level).fpm$
 `
 rem Load the FPM
 gosub _mapfile_loadproject_fpm
 `
return

_mapfile_loadproject_fpm:
 `
 rem Ensure FPM exists
 if file exist(projectfilename$)=1
  `
  rem Store and switch folders
  tdirst$=get dir$() : set dir myownrootdir$+"mapbank\testmap\"
  `
  rem Delete key testmap file (if any)
  if file exist("header.dat")=1
   delete file "header.dat"
  endif
  `
  rem Retore folder to Files (for extraction)
  set dir tdirst$
  `
  rem Read FPM into testmap area
  open file block projectfilename$,1,"mypassword"
  perform checklist for file block data 1
  tpath$=myownrootdir$+"mapbank\testmap\"
  for i = 1 to checklist quantity( )
   extract file from block 1, checklist string$( i ), tpath$
  next i
  close file block 1
  `
  rem If file still not present, extraction failed
  set dir myownrootdir$+"\mapbank\testmap\"
  if file exist("header.dat")=0
   rem inform user the FPM could not be loaded (corrupt file)
   tloadsuccessfully=0
  endif
  `
  rem X10 if replacement header exists (from test game save), use that instead
  rem or header being loaded, replacing it via a rename
  if file exist("header(new).dat")=1
   if file exist("header.dat")=1
    delete file "header.dat"
    rename file "header(new).dat","header.dat"
   endif
  endif  
  `
  rem if CFG file present, copy to editor folder for later use (stores FPG for us)
  rem 240907 - changed get dir$() to myownrootdir$
  if tloadsuccessfully=1
   tttfile$="cfg.cfg"
   if file exist(tttfile$)=1
    if file exist(myownrootdir$+"\editors\gridedit\"+tttfile$)=1 then delete file myownrootdir$+"\editors\gridedit\"+tttfile$
    copy file tttfile$,myownrootdir$+"\editors\gridedit\"+tttfile$
   endif
  endif
  `
  rem Retore and switch folders
  set dir tdirst$
  `
 else
  tloadsuccessfully=0
 endif
 `
return

_mapfile_save_fpl:
 `
 rem Delete any old file before saving
 told$=get dir$()
 set dir myownrootdir$
 levelfilename$="levelbank\level"+str$(level)+".zip"
 if file exist(levelfilename$)=1 then delete file levelfilename$
 create file block 1, levelfilename$
 set file block key 1, "mypassword"
 set dir "levelbank\testlevel\"
 add file to block 1, "header.dat"
 add file to block 1, "map.ent"
 add file to block 1, "map.way"
 add file to block 1, "map.fpmb"
 if 1
  for t=0 to 19
   tblockfile$="map"+str$(t)+".obs"
   add file to block 1, tblockfile$
  next t 
 else
  add file to block 1, "map.obs"
  add file to block 1, "map.obsh"
 endif
 add file to block 1, "universe.eff"
 add file to block 1, "universe.dbo"
 add file to block 1, "universephy.dbo"
 add file to block 1, "universe.dbu"
 add file to block 1, "universe.ele"
 add file to block 1, "universe.lgt"
 tdds=0
 while tdds<65535
  if file exist("lightmaps\"+str$(tdds)+".dds")=1
   add file to block 1,"lightmaps\"+str$(tdds)+".dds"
  else
   if file exist("lightmaps\"+str$(tdds)+".png")=1
    add file to block 1,"lightmaps\"+str$(tdds)+".png"
   else
    exit
   endif
  endif
  inc tdds
 endwhile
 set dir "..\.."
 save file block 1
 set dir told$
 addfiletocollection(levelfilename$)
 `
return

_mapfile_load_fpl:
 `
 rem Load if exists
 levelfilename$=myownrootdir$+"levelbank\level"+str$(level)+".zip"
 if file exist(levelfilename$)=1
  `
  rem Read FPL into testlevel area
  open file block levelfilename$,1,"mypassword"
  perform checklist for file block data 1
  tpath$=myownrootdir$+"levelbank\testlevel\"
  for i = 1 to checklist quantity( )
   extract file from block 1, checklist string$( i ), tpath$
  next i
  close file block 1
  `
 endif
 `
return


