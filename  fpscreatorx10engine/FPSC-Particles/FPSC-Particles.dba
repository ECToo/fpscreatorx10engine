rem
rem Particles (debris, fragments, particles, damage)
rem

_part_init:

rem Setup particles
gosub _part_initexploders

rem Setup fragment objects

rem SCIFI
rem Crate
debrisshapeindex=1
i=debrisshapeindex
bitdetails(debrisshapeindex).max=6
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\scifi\scenery\furniture\cratec\crate_c"
bitoffset(i,1).x#=0 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=0
bitoffset(i,2).x#=0 : bitoffset(i,2).y#=15 : bitoffset(i,2).z#=-15
bitoffset(i,3).x#=15 : bitoffset(i,3).y#=15 : bitoffset(i,3).z#=0
bitoffset(i,4).x#=0 : bitoffset(i,4).y#=15 : bitoffset(i,4).z#=15
bitoffset(i,5).x#=-15 : bitoffset(i,5).y#=15 : bitoffset(i,5).z#=0
bitoffset(i,6).x#=0 : bitoffset(i,6).y#=30 : bitoffset(i,6).z#=0
rem Gas Canister
debrisshapeindex=2
i=debrisshapeindex
bitdetails(debrisshapeindex).max=2
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\scifi\scenery\furniture\cylindera\cylinder_a"
bitoffset(i,1).x#=0 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=0
bitoffset(i,2).x#=0 : bitoffset(i,2).y#=24 : bitoffset(i,2).z#=0
rem Cylinder
debrisshapeindex=3
i=debrisshapeindex
bitdetails(debrisshapeindex).max=5
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\scifi\scenery\furniture\cylinderb\cylinder_b"
bitoffset(i,1).x#=0 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=0
bitoffset(i,2).x#=3 : bitoffset(i,2).y#=17 : bitoffset(i,2).z#=6
bitoffset(i,3).x#=-8 : bitoffset(i,3).y#=17 : bitoffset(i,3).z#=3
bitoffset(i,4).x#=-3 : bitoffset(i,4).y#=17 : bitoffset(i,4).z#=-8
bitoffset(i,5).x#=8 : bitoffset(i,5).y#=17 : bitoffset(i,5).z#=-5
`
rem WW2
rem Bottle
debrisshapeindex=4
i=debrisshapeindex
bitdetails(debrisshapeindex).max=3
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\ww2\scenery\furniture\itemb\item_b"
bitoffset(i,1).x#=0 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=0
bitoffset(i,2).x#=0 : bitoffset(i,2).y#=7 : bitoffset(i,2).z#=0
bitoffset(i,3).x#=0 : bitoffset(i,3).y#=14 : bitoffset(i,3).z#=0
rem CrateC
debrisshapeindex=5
i=debrisshapeindex
bitdetails(debrisshapeindex).max=7
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\ww2\scenery\furniture\cratec\crate_c"
bitoffset(i,1).x#=0 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=0
bitoffset(i,2).x#=-15 : bitoffset(i,2).y#=15 : bitoffset(i,2).z#=0
bitoffset(i,3).x#=0 : bitoffset(i,3).y#=15 : bitoffset(i,3).z#=-15
bitoffset(i,4).x#=15 : bitoffset(i,4).y#=15 : bitoffset(i,4).z#=0
bitoffset(i,5).x#=0 : bitoffset(i,5).y#=15 : bitoffset(i,5).z#=15
bitoffset(i,6).x#=0 : bitoffset(i,6).y#=15 : bitoffset(i,6).z#=15
bitoffset(i,7).x#=0 : bitoffset(i,7).y#=30 : bitoffset(i,7).z#=0
rem CrateE
debrisshapeindex=6
i=debrisshapeindex
bitdetails(debrisshapeindex).max=6
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\ww2\scenery\furniture\cratee\crate_e"
bitoffset(i,1).x#=0 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=0
bitoffset(i,2).x#=-15 : bitoffset(i,2).y#=15 : bitoffset(i,2).z#=0
bitoffset(i,3).x#=0 : bitoffset(i,3).y#=15 : bitoffset(i,3).z#=-15
bitoffset(i,4).x#=15 : bitoffset(i,4).y#=15 : bitoffset(i,4).z#=0
bitoffset(i,5).x#=0 : bitoffset(i,5).y#=15 : bitoffset(i,5).z#=15
bitoffset(i,6).x#=0 : bitoffset(i,6).y#=30 : bitoffset(i,6).z#=0
rem CrateF
debrisshapeindex=7
i=debrisshapeindex
bitdetails(debrisshapeindex).max=5
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\ww2\scenery\furniture\cratef\crate_f"
bitoffset(i,1).x#=-16 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=-11
bitoffset(i,2).x#=-16 : bitoffset(i,2).y#=2 : bitoffset(i,2).z#=6
bitoffset(i,3).x#=16 : bitoffset(i,3).y#=1 : bitoffset(i,3).z#=0
bitoffset(i,4).x#=0 : bitoffset(i,4).y#=10 : bitoffset(i,4).z#=2
bitoffset(i,5).x#=0 : bitoffset(i,5).y#=5 : bitoffset(i,5).z#=-4
rem CylinderF
debrisshapeindex=8
i=debrisshapeindex
bitdetails(debrisshapeindex).max=5
bitdetails(debrisshapeindex).collisionmode=2
bitdetails(debrisshapeindex).file$="meshbank\ww2\scenery\furniture\cylinderf\cylinder_f"
bitoffset(i,1).x#=0 : bitoffset(i,1).y#=0 : bitoffset(i,1).z#=0
bitoffset(i,2).x#=0 : bitoffset(i,2).y#=12 : bitoffset(i,2).z#=-6
bitoffset(i,3).x#=0 : bitoffset(i,3).y#=13 : bitoffset(i,3).z#=5
bitoffset(i,4).x#=0 : bitoffset(i,4).y#=24 : bitoffset(i,4).z#=-10
bitoffset(i,5).x#=0 : bitoffset(i,5).y#=24 : bitoffset(i,5).z#=8

rem Load the fragment objects (three sets of each)
fragmento=fragmentobjectoffset
for debrisshapeindex=1 to 8
 `
 rem use original to get fragment complete size
 o$=bitdetails(debrisshapeindex).file$+".x"
 addfiletocollection(o$)
 load object o$,fragmento
 bitdetails(debrisshapeindex).sizex=object size x(fragmento)
 bitdetails(debrisshapeindex).sizey=object size y(fragmento)
 bitdetails(debrisshapeindex).sizez=object size z(fragmento)
 delete object fragmento
 `
 rem mark start of fragment objects sequence (seeder,3xallfragments)
 bitdetails(debrisshapeindex).fragmentobjstart=fragmento
 `
 rem create object seeder
 make object cone fragmento,10
 make mesh from object fragmento,fragmento
 for o=1 to 8 : add limb fragmento,o,fragmento : next o
 delete mesh fragmento
 hide object fragmento
 inc fragmento
 `
 rem load original
 for o=1 to bitdetails(debrisshapeindex).max
  o$=bitdetails(debrisshapeindex).file$+"_chunk"+str$(o)+".x"
  addfiletocollection(o$)
  load object o$,fragmento
  hide object fragmento
  inc fragmento
 next o
 `
 rem instance two more sets
 for n=1 to 2
  for o=1 to bitdetails(debrisshapeindex).max
   fragmentorig=bitdetails(debrisshapeindex).fragmentobjstart+1+(o-1)
   clone object fragmento,fragmentorig
   hide object fragmento
   inc fragmento
  next o
 next n
 `
next debrisshapeindex
fragmentobjectoffsetmax=fragmento-1

return

_part_free:
 `
 rem Delete particles and fragments
 for o=fragmentobjectoffset to fragmentobjectoffsetmax
  if object exist(o)=1
   tobj=o : gosub _physics_deleteentity
   delete object o
  endif
 next o
 `
 rem Delete explosion objects
 gosub _part_freeexploders
 `
return

_part_movedebrisifinray:
 `
 rem ray is x1#,y1#,z1#,wallhitx#,wallhity#,wallhitz#
 for o=fragmentobjectoffset to fragmentobjectoffsetmax
  if object visible(o)=1
   if intersect object(o,x1#,y1#,z1#,wallhitx#,wallhity#,wallhitz#)<>0
    tix#=wallhitx#-x1# : tiy#=wallhity#-y1# : tiz#=wallhitz#-z1#
    tnorm#=(abs(tix#)+abs(tiy#)+abs(tiz#))/3.0
    tix#=tix#/tnorm# : tiy#=tiy#/tnorm# : tiz#=tiz#/tnorm#
    ttobj=o : ttx#=tix#*tforce# : tty#=tiy#*tforce# : ttz#=tiz#*tforce#
    gosub _physics_setvelocity
   endif
  endif
 next o
 `
return

_part_createfragment:
 `
 rem takes debrisshapeindex,frox,y,z,a#,debrissize,x,y,z# (and new froobjtocopy)
 debrisscalex#=(debrissizex#/bitdetails(debrisshapeindex).sizex)*100.0
 debrisscaley#=(debrissizey#/bitdetails(debrisshapeindex).sizey)*100.0
 debrisscalez#=(debrissizez#/bitdetails(debrisshapeindex).sizez)*100.0
 `
 rem seeder obj placement
 frbo=bitdetails(debrisshapeindex).fragmentobjstart
 position object frbo,frox#,froy#,froz#
 `yrotate object frbo,froa#
 set object to object orientation frbo,frocopyorientfrom
 scale object frbo,debrisscalex#,debrisscaley#,debrisscalez#
 `
 rem cycle through fragment instances (3 copies avail)
 fragmentchoose=bitdetails(debrisshapeindex).choice+1
 if fragmentchoose>2 then fragmentchoose=0
 bitdetails(debrisshapeindex).choice=fragmentchoose
 fragmentchoose=fragmentchoose*bitdetails(debrisshapeindex).max
 `
 rem place fragments using seeder limbs
 frchi=bitdetails(debrisshapeindex).choice
 stparte=e : stparttobj=tobj
 for o=1 to bitdetails(debrisshapeindex).max
  fragmento=bitdetails(debrisshapeindex).fragmentobjstart+1+(o-1)+fragmentchoose
  tobj=fragmento : gosub _physics_deleteentity
  tfx#=bitoffset(debrisshapeindex,o).x#
  tfy#=bitoffset(debrisshapeindex,o).y#
  tfz#=bitoffset(debrisshapeindex,o).z#
  offset limb frbo,o,tfx#,tfy#,tfz#
  position object fragmento,limb position x(frbo,o),limb position y(frbo,o),limb position z(frbo,o)
  rotate object fragmento,limb direction x(frbo,o),limb direction y(frbo,o),limb direction z(frbo,o)
  rem maybe a scale of *0.9 will reduce fling-away effect
  scale object fragmento,debrisscalex#*0.8,debrisscaley#*0.8,debrisscalez#*0.8
  gosub _physics_createdebrisshape
  if debristextureused=0
   rem 200807 - no texture (likely a texture array entity, so blacken!)
   texture object fragmento,explosionscorchsolid
   set object transparency fragmento,2
  else
   texture object fragmento,debristextureused
   if debrisexplodable=1
    set blend mapping on fragmento, 1, explosionscorch, 3, 6
   else
    set blend mapping on fragmento, 1, explosionstressed, 3, 7
   endif
  endif
  tobj=fragmento : e=0
  gosub _physics_ensurephysicsobjvalid
  show object fragmento
 next o
 `
 `rem X10 ground dust effect
 `rem moved to any explosion, for better soft particle presence
 `if particlegrounddust<>0
 ` inc particlegrounddust
 ` if particlegrounddust>10 then particlegrounddust=6
 ` rem emissions are switched off, can create them individually using new command
 ` emit particle particlegrounddust,frox#,froy#,froz#
 `endif
 `
 e=stparte : tobj=stparttobj
 `
return

_part_initexploders:
 `
 rem Load spark, fire and smoke
 tfile$="gamecore\debris\spark.tga" : explodedecalspark=loadinternalimagecompressquality(tfile$,5,1)
 tfile$="gamecore\debris\fire.tga" : explodedecalfire=loadinternalimagecompressquality(tfile$,5,1)
 tfile$="gamecore\debris\smoke.tga" : explodedecalsmoke=loadinternalimagecompressquality(tfile$,5,1)
 tfile$="gamecore\debris\scorched.tga" : explosionscorch=loadinternalimagecompressquality(tfile$,5,1)
 tfile$="gamecore\debris\stressed.tga" : explosionstressed=loadinternalimagecompressquality(tfile$,5,1)
 tfile$="gamecore\debris\scorched_solid.tga" : explosionscorchsolid=loadinternalimagecompressquality(tfile$,5,1)
 `
 rem X10 apply a soft decal shader for all decals (depth-buffer-read)
 tfile$="effectbank\common\softdecal.fx"
 gsoftdecalshader=loadinternaleffectunique(tfile$,0)
 `
 rem Create Explosion Decals
 texplodersnd=1
 o=explodedecalobjstart
 tsndid=explodesoundoffset
 for exploderindex=1 to explodermax
  `
  rem Set vars and load sound
  exploder(exploderindex).obj=o
  exploder(exploderindex).explode=0
  tfile$="gamecore\debris\explosionfuel"+str$(texplodersnd)+".wav" : addfiletocollection(tfile$)
  inc texplodersnd : if texplodersnd>5 then texplodersnd=1
  load sound tfile$,tsndid
  exploder(exploderindex).explodesound=tsndid
  inc tsndid
  `
  rem Create planes for mapping explosion/smoke images to
  for oi=0 to 16
   make object plain o,100,100
   if oi=0 then texture object o,explodedecalspark : set object light o,0
   if oi>=1 and oi<=3 then texture object o,explodedecalfire : set object light o,0
   if oi>=4 then texture object o,explodedecalsmoke
   set object transparency o,2
   disable object zwrite o
   set object cull o,0
   rem X10 apply the soft decal effect to all decals
   set object effect o,gsoftdecalshader
   hide object o
   inc o
  next oi
  `
 next exploderindex
 explodedecalobjmax=o-1
 explodesoundmax=tsndid-1
 `
return

_part_freeexploders:
 `
 rem Delete Explosion Decals
 for o=explodedecalobjstart to explodedecalobjmax
  if object exist(o)=1
   tobj=o : gosub _physics_deleteentity
   delete object o
  endif
 next o
 `
 rem Delete sounds
 for tsndid=explodesoundoffset to explodesoundmax
  if sound exist(tsndid)=1
   delete sound tsndid
  endif
 next tsndid
 `
return

_part_areexplosionsmaxedout:
 `
 tmaxedoutyes=0
 for exploderindex=1 to explodermax
  if exploder(exploderindex).explode=0 then exit
 next exploderindex
 if exploderindex>=explodermax
  tmaxedoutyes=1
 endif
 `
return

_part_triggerexplosion:
 `
 rem Find free exploder
 for exploderindex=1 to explodermax
  if exploder(exploderindex).explode=0 then exit
 next exploderindex
 if exploderindex<explodermax
  rem visual
  exploder(exploderindex).explode=1
  exploder(exploderindex).x=frox#
  exploder(exploderindex).y=froy#
  exploder(exploderindex).z=froz#
  rem audio
  ts=exploder(exploderindex).explodesound
  if sound exist(ts)=1
   rem make explosion X times larger (ie closer)
   tscamx#=camera position x(playercam)
   tscamy#=camera position y(playercam)
   tscamz#=camera position z(playercam)
   tscamx#=(frox#-tscamx#)
   tscamy#=(froy#-tscamy#)
   tscamz#=(froz#-tscamz#)
   tvol=100-(sqrt(abs(tscamx#*tscamx#)+abs(tscamy#*tscamy#)+abs(tscamz#*tscamz#))/200.0)
   if tvol<0 then tvol=0
   if tvol>100 then tvol=100
   broadcast3dsound(frox#,froy#,froz#,100.0)
   set sound volume ts,tvol
   play sound ts
  endif
  rem dynamic light spot flash
  spotflashbang=5
  spotflashbangx=frox#
  spotflashbangy=froy#+10.0
  spotflashbangz=froz#
  gosub _lighting_spotflash  
  rem X10 - 270907 - create a soft particle smoke at explosion epicentre
  if particlegrounddust<>0
   inc particlegrounddust
   if particlegrounddust>10 then particlegrounddust=6
   rem emissions are switched off, can create them individually using new command
   emit particle particlegrounddust,frox#,froy#,froz#
  endif  
 endif
 `
return

_part_controlexploders:
 `
 rem X10 timer based speed - Use a timer based effect for machine independence
 explodespeed#=(1.0/40.0)*(timer()-lastexplodespeedtime) : lastexplodespeedtime=timer()
 `
 rem Handle all explosions in progress
 for exploderindex=1 to explodermax
  select exploder(exploderindex).explode
   case 1:
    o=exploder(exploderindex).obj
    show object o+0 : position object o+0,exploder(exploderindex).x,exploder(exploderindex).y,exploder(exploderindex).z
    show object o+1 : position object o+1,exploder(exploderindex).x,exploder(exploderindex).y,exploder(exploderindex).z
    show object o+2 : position object o+2,exploder(exploderindex).x,exploder(exploderindex).y,exploder(exploderindex).z
    show object o+3 : position object o+3,exploder(exploderindex).x,exploder(exploderindex).y,exploder(exploderindex).z
    for oi=4 to 13
     o=exploder(exploderindex).obj+oi
     position object o,exploder(exploderindex).x+(cos(((o-5)*20)-180)*50),exploder(exploderindex).y+((sin(((o-5)*20)-180)*20)),exploder(exploderindex).z
     scale object o,25+rnd(25),25+rnd(25),25+rnd(25)
     zrotate object o,rnd(360)
     show object o
    next oi
    for oi=14 to 16
     o=exploder(exploderindex).obj+oi
     position object o,exploder(exploderindex).x+(cos(((o-15)*20)-180)*25),exploder(exploderindex).y+rnd(10),exploder(exploderindex).z
     scale object o,50+rnd(50),50+rnd(50),50+rnd(50)
     zrotate object o,rnd(360)
     show object o
    next oi
    for oi=0 to 16
     o=exploder(exploderindex).obj+oi
     point object o,camera position x(playercam),camera position y(playercam),camera position z(playercam)
     move object o,20 : rem get out of flat wall
    next oi
    exploder(exploderindex).explode=2
    exploder(exploderindex).dist#=15
    exploder(exploderindex).smoke#=0
    exploder(exploderindex).fade#=100
   endcase
  endselect
  if exploder(exploderindex).explode>0
   rem flash
   exploder(exploderindex).fade#=exploder(exploderindex).fade#-(10*explodespeed#)
   if exploder(exploderindex).fade#<1 then exploder(exploderindex).fade#=0
   sparkfade#=100-((90-exploder(exploderindex).fade#)*40)
   if sparkfade#<0 then sparkfade#=0
   if sparkfade#>100 then sparkfade#=100
   set alpha mapping on exploder(exploderindex).obj+0,sparkfade#
   set alpha mapping on exploder(exploderindex).obj+1,exploder(exploderindex).fade#/1.1
   s#=200+(25-(exploder(exploderindex).fade#/2))
   scale object exploder(exploderindex).obj+1,s#,s#,s#
   set alpha mapping on exploder(exploderindex).obj+2,exploder(exploderindex).fade#/1.5
   s#=150+(25-(exploder(exploderindex).fade#/3))
   scale object exploder(exploderindex).obj+2,s#,s#,s#
   set alpha mapping on exploder(exploderindex).obj+3,exploder(exploderindex).fade#/2.0
   s#=80+(25-(exploder(exploderindex).fade#/4))
   scale object exploder(exploderindex).obj+3,s#,s#,s#
   rem smoke
   exploder(exploderindex).dist#=exploder(exploderindex).dist#+(0.1*explodespeed#)
   exploder(exploderindex).smoke#=exploder(exploderindex).smoke#+(2.0*explodespeed#)
   if exploder(exploderindex).smoke#>=100
    rem end smoke
    for oi=0 to 16
     o=exploder(exploderindex).obj+oi
     hide object o
    next oi
    exploder(exploderindex).explode=0
   else
    rem move smoke upwards
    for oi=4 to 16
     o=exploder(exploderindex).obj+oi
     if oi>=14 then up#=0.3 else up#=0.05
     position object o,object position x(o),object position y(o)+up#,object position z(o)
     set alpha mapping on o,100.0-exploder(exploderindex).smoke#
    next oi
   endif
  endif
 next exploderindex
 `
return

`
` Soft Particles
`

_particles_init:
 `
 rem start with no particles in scene
 particleindex=0
 `
 remstart
 experiment to test oparticle commands
 `set particle speed p,0.04
 `particlespeed#=1500 : rem steam
 img$="smokevol1.dds"
 imgid=loadinternalimage(img$)
 particlesize#=10.0
 make particles 1,imgid,50,particlesize#
 position particles 1,450,525,-350
 set particle mask 1,%110010
 color particles 1,255,255,255
 show particles 1
 if 0
  rem soft billowing smoke (small)
  particlespeed#=150.0
  particlelife#=500.0
  particleemissionsdelay#=100.0
  particlechaos#=100.0
  particlespeedofexpand#=5.0
 endif
 if 1
  rem violent steam (small)
  particlespeed#=1000.0
  particlelife#=50.0
  particleemissionsdelay#=5.0
  particlechaos#=5.0
  particlespeedofexpand#=2.0
 endif
 set particle velocity 1,particlespeed#
 set particle life 1,particlelife#
 set particle emissions 1,particleemissionsdelay#
 set particle chaos 1,particlechaos#
 set particle speed 1,particlespeedofexpand#
 remend
 `
 rem create five particles for gunsmoke
 particlegunsmoke=1
 for p=1 to 5
  particletype=3
  particlex#=0
  particley#=0
  particlez#=0
  gosub _particles_create
 next p
 `
 rem create five particles for ground dust
 particlegrounddust=6
 for p=6 to 10
  particletype=4
  particlex#=0
  particley#=0
  particlez#=0
  gosub _particles_create
 next p
 `
 rem create five particles for corpse disappearing
 particlecorpsedust=11
 for p=11 to 15
  particletype=5
  particlex#=0
  particley#=0
  particlez#=0
  gosub _particles_create
 next p
 `
return

_particles_create:
 `
 rem choose type
 if particletype=1
  rem soft billowing smoke
  particlesize#=10.0-rnd(2)
  particlespeed#=150.0-rnd(25)
  particlelife#=500.0-rnd(100)
  particleemissionsdelay#=100.0-rnd(10)
  particlechaos#=100.0-rnd(10)
  particlespeedofexpand#=5.0-rnd(1)
 endif
 if particletype=2
  rem violent steam
  particlesize#=4.0
  particlespeed#=1250.0
  particlelife#=100.0
  particleemissionsdelay#=5.0
  particlechaos#=5.0
  particlespeedofexpand#=2.0
 endif
 if particletype=3
  rem soft gun smoke (none emitting)
  particlesize#=5.0
  particlespeed#=150.0
  particlelife#=200.0
  particlechaos#=200.0
  particlespeedofexpand#=5
  particleemissionsdelay#=0
 endif
 if particletype=4
  rem ground dust (non emitting)
  particlesize#=30.0 : rem 15 280907
  particlespeed#=50.0 : rem 75
  particlelife#=400.0 : rem 300
  particlechaos#=50.0
  particlespeedofexpand#=7
  particleemissionsdelay#=0
 endif
 if particletype=5
  rem corpse dust (non emitting)
  particlesize#=20.0
  particlespeed#=350.0
  particlelife#=200.0
  particlechaos#=200.0
  particlespeedofexpand#=5
  particleemissionsdelay#=0
 endif
 `
 rem create particle
 inc particleindex
 img$="gamecore\softdecals\smoke\smokevol1.dds"
 imgid=loadinternalimage(img$)
 make particles particleindex,imgid,50,particlesize#
 position particles particleindex,particlex#,particley#,particlez#
 set particle mask particleindex,%110010
 color particles particleindex,255,255,255
 show particles particleindex
 `
 rem set particle details
 set particle velocity particleindex,particlespeed#
 set particle life particleindex,particlelife#
 set particle emissions particleindex,particleemissionsdelay#
 set particle chaos particleindex,particlechaos#
 set particle speed particleindex,particlespeedofexpand#
 `
return

_particles_control:
 `
 rem hide/show particles, in time
 `
return

_particles_free:

rem Handle any debris
for p=1 to particleindex
 if particles exist(p)=1
  delete particles p
 endif
next p
particleindex=0

return
