rem
rem GAMEFLOW (DEFAULT PIPELINE FOR FPSC-V1)
rem

_gameflow_default:
 `
 rem Test Game Mode - hide camera until ready
 if gtestgamemodefromeditor=1
  gtestgamemodefromeditorokaypressed=0
  set camera view playercam,0,0,1,1
  rem Ready With Test Game Engine
  open file map 1, "FPSTESTGAMEDIALOG"
  wait for file map event 1
  if get file map dword( 1, 0 ) = 1
   set file map dword 1, 12, 1
   set file map string$ 1, 1000, strarr$(377)
   wait for file map event 1
   while get file map dword ( 1, 12 ) = 1
    wait for file map event 1
   endwhile
  endif
  close file map 1
 endif
 rem Build Executable Game Mode
 if gcompilestandaloneexe=1
  rem Ready With Build Game Engine
  open file map 1, "FPSBUILDGAME"
  set file map dword 1, 40, 12
  set file map dword 1, 44, 1
  set file map string$ 1, 1000, strarr$(378)
  wait for file map event 1
  while get file map dword ( 1, 44 ) = 1
   wait for file map event 1
  endwhile
  close file map 1
 endif
 `
 rem X10 effects menu assets
 tfile$="gamecore\huds\border.png" : load image tfile$,x10effectmenuimagestart+0 : addfiletocollection(tfile$)
 tfile$="gamecore\huds\bar.png" : load image tfile$,x10effectmenuimagestart+1 : addfiletocollection(tfile$)
 tfile$="gamecore\huds\colorbar.png" : load image tfile$,x10effectmenuimagestart+2 : addfiletocollection(tfile$)
 tfile$="gamecore\huds\colorbar.dat" : load array tfile$,hudcolorbar() : addfiletocollection(tfile$)
 hudcolorbar(0)=rgb(255,255,255) 
 tfile$="gamecore\huds\handle.png" : load image tfile$,x10effectmenuimagestart+3 : addfiletocollection(tfile$)
 tfile$="gamecore\huds\bar.png" : load image tfile$,x10effectmenuimagestart+4 : addfiletocollection(tfile$)
 sprite x10effectmenuimagestart+0,-10000,-10000,x10effectmenuimagestart+0
 sprite x10effectmenuimagestart+1,-10000,-10000,x10effectmenuimagestart+1
 sprite x10effectmenuimagestart+2,-10000,-10000,x10effectmenuimagestart+2
 sprite x10effectmenuimagestart+3,-10000,-10000,x10effectmenuimagestart+3
 sprite x10effectmenuimagestart+4,-10000,-10000,x10effectmenuimagestart+4
 size sprite x10effectmenuimagestart+1,204,7
 size sprite x10effectmenuimagestart+2,204,7
 size sprite x10effectmenuimagestart+3,19,19
 size sprite x10effectmenuimagestart+4,24,20
 set sprite alpha x10effectmenuimagestart+0,255
 set sprite alpha x10effectmenuimagestart+1,210
 set sprite alpha x10effectmenuimagestart+2,210
 set sprite alpha x10effectmenuimagestart+3,255
 set sprite alpha x10effectmenuimagestart+4,255 
 `
 rem X10 label texts
 for t=0 to 16
  if t=0 then t$="skyvalue.png"
  if t=1 then t$="ambientlight.png"
  if t=2 then t$="fogcolor.png"
  if t=3 then t$="fogrange.png"
  if t=4 then t$="bloomsize.png"
  if t=5 then t$="bloomstrength.png"
  if t=6 then t$="waterspeed.png"
  if t=7 then t$="watersmoothness.png"
  if t=8 then t$="watercolor.png"
  if t=9 then t$="underwatercolor.png"
  if t=10 then t$="waterreflectivity.png"
  if t=11 then t$="waterrefractivity.png"
  if t=12 then t$="waterfresnelterm.png"
  if t=13 then t$="waterlevel.png"
  if t=14 then t$="shadowstrength.png"
  if t=15 then t$="shadowquantity.png"
  if t=16 then t$="windowrefractivity.png"
  tfile$="languagebank\"+language$+"\gamecore\huds\"+t$
  load image tfile$,x10effectmenuimagestart+5+t : addfiletocollection(tfile$)
  sprite x10effectmenuimagestart+5+t,-10000,-10000,x10effectmenuimagestart+5+t
  size sprite x10effectmenuimagestart+5+t,128,8
  set sprite alpha x10effectmenuimagestart+5+t,255
 next t
 `
 rem Load numerics for X10 effect menu
 tfile$="gamecore\huds\numeric3.png" : load image tfile$,x10effectmenuimagestart+31 : addfiletocollection(tfile$)
 `
 rem Record Icon
 tfile$="gamecore\huds\R-icon.png" : load image tfile$,x10effectmenuimagestart+32 : addfiletocollection(tfile$)
 sprite x10effectmenuimagestart+32,-10000,-10000,x10effectmenuimagestart+32
 set sprite alpha x10effectmenuimagestart+32,255
 size sprite x10effectmenuimagestart+32,16,16
 `
 rem Resource Meter Assets
 img=x10effectmenuimagestart+33
 tfile$="languagebank\"+language$+"\gamecore\huds\"
 if file exist(tfile$+"resmeter\resource-panel.png")=1
  load image tfile$+"resmeter\resource-panel.png",img+1
  load image tfile$+"resmeter\glass-tube.png",img+2
  sprite img+1,-10000,-10000,img+1
  sprite img+2,-10000,-10000,img+2
  size sprite img+1,238,335
  size sprite img+2,207,14
  imgbase=img+3
  for rmi=0 to 4
   if rmi=0 then t$="yellow" : n$="label-polygons.png"
   if rmi=1 then t$="green" : n$="label-physics.png"
   if rmi=2 then t$="blue" : n$="label-ai.png"
   if rmi=3 then t$="red" : n$="label-entity.png"
   if rmi=4 then t$="orange" : n$="label-memory.png"
   load image tfile$+"resmeter\"+n$,imgbase+0,1 : sprite imgbase+0,-10000,-10000,imgbase+0
   load image tfile$+"resmeter\bar-"+t$+"-start.png",imgbase+1,1 : sprite imgbase+1,-10000,-10000,imgbase+1
   load image tfile$+"resmeter\bar-"+t$+".png",imgbase+2,1 : sprite imgbase+2,-10000,-10000,imgbase+2
   load image tfile$+"resmeter\bar-"+t$+"-end.png",imgbase+3,1 : sprite imgbase+3,-10000,-10000,imgbase+3
   size sprite imgbase+0,150,8
   size sprite imgbase+1,5,10
   size sprite imgbase+2,10,10
   size sprite imgbase+3,5,10
   inc imgbase,4
  next rmi
 endif
 `
 rem Volume Menu Assets
 img=x10effectmenuimagestart+56
 tfile$="languagebank\"+language$+"\gamecore\huds\"
 load image tfile$+"volumes\volume-panel.png",img+1
 addfiletocollection(tfile$+"volumes\volume-panel.png")
 sprite img+1,-10000,-10000,img+1
 size sprite img+1,238,255
 imgbase=img+2
 for rmi=0 to 4
  if rmi=0 then n$="label-titlemusic.png"
  if rmi=1 then n$="label-loadingmusic.png"
  if rmi=2 then n$="label-ingamemusic.png"
  if rmi=3 then n$="label-playersounds.png"
  if rmi=4 then n$="label-ingamesounds.png"
  load image tfile$+"volumes\"+n$,imgbase+0,1 : sprite imgbase+0,-10000,-10000,imgbase+0
  load image tfile$+"volumes\bar.png",imgbase+1,1 : sprite imgbase+1,-10000,-10000,imgbase+1
  load image tfile$+"volumes\handle.png",imgbase+2,1 : sprite imgbase+2,-10000,-10000,imgbase+2
  addfiletocollection(tfile$+"volumes\"+n$)
  addfiletocollection(tfile$+"volumes\bar.png")
  addfiletocollection(tfile$+"volumes\handle.png")
  size sprite imgbase+0,150,8
  size sprite imgbase+1,204,7
  size sprite imgbase+2,19,19
  inc imgbase,3
 next rmi
 ` 
 rem X10 default settings
 x10effectmenu(0)=10 : rem ambient
 x10effectmenu(1)=0 : rem fog color
 x10effectmenu(2)=50 : rem fog dist
 x10effectmenu(3)=50 : rem bloom size
 x10effectmenu(4)=25 : rem bloom str
 x10effectmenu(5)=25 : rem water speed
 x10effectmenu(6)=50 : rem water smooth
 x10effectmenu(7)=100.0/rgb(0,0,255) : rem water color
 x10effectmenu(8)=50 : rem water refl
 x10effectmenu(9)=50 : rem water refr
 x10effectmenu(10)=50 : rem water fresnel
 x10effectmenu(11)=25 : rem water level
 x10effectmenu(12)=100 : rem shadow shadow
 x10effectmenu(13)=3 : rem shadow qty
 x10effectmenu(14)=50 : rem window refr
 `
 rem App Loop
 loopapp=1
 while loopapp=1
  `
  rem Preapp Init
  gosub _ai_setkeywords
  gosub _ai_scanfornewscriptsonly
  gosub _ai_reset
  `
  rem X10 - 270907 - load level1 to get title volume and loading volume
  if grealgameviewstate=1
   gosub _mapfile_gettitleandloadingvolumes
  endif
  `
  rem Title screen
  controlSPACE=1
  controlESCAPE=1
  hudmusicvolume=globaltitlepagevolume
  if gtestgamemodefromeditor=0
   gosub _screen_title_init
  else
   gosub _screen_title_init
   aiindex=screenai : gosub _ai_getmusicactionfromscript : gvolumetitlemusic$=tfile$
   gosub _screen_close
  endif
  if grealgameviewstate=1
   continueokay=0
   while continueokay=0
    gosub _screen_control
    sync
   endwhile
  else
   rem in test mode, we are the 'host'
   if gtestgamemodefromeditor<>0 then createorjoin=1
  endif
  `
  rem Obtain title screen info (multiplayer)
  if gmultiplayergame=1
   if gtestgamemodefromeditor<>0
    rem Test Game Mode
    playername$="testarenaplr"
    ipaddress$=""
   else
    rem Scan HUD array for name [and ip]
    for hudid=1 to hudmax
     if hud(hudid).maintype=8
      if hud(hudid).typemode=21 then playername$=hud(hudid).text$ : hudhaveplayername=1
      if hud(hudid).typemode=22 then ipaddress$=hud(hudid).text$
     endif
    next hidid
   endif
   rem Early init sets up connection (if it can)
   gosub _multi_earlyinit
  endif
  `
  rem until editor has flag set when building arena exe..
  gosub _multi_assetloader
  `
  rem Close title screen
  if gtestgamemodefromeditor=0 then gosub _screen_close
  `
  rem if not quitting
  if loopapp=1
   `
   rem Set first level
   controlSPACE=1
   controlESCAPE=0
   level=1
   `
   rem Start level loop
   looplevel=1
   while looplevel=1
    `
    rem [OPTIONAL] Triggers a 'saved game' dataset to load
    if loadsavedlevel$<>""
     saveloadfile$=loadsavedlevel$
     gosub _saveload_loadgame
     saveloadfile$=""
    endif
    `
    rem Loading level
    hudmusicvolume=globalloadingpagevolume
    if gtestgamemodefromeditor=0
     gosub _screen_loading_init
    else
     gosub _screen_loading_init
     aiindex=screenai : gosub _ai_getmusicactionfromscript : gvolumeloadingmusic$=tfile$     
     gosub _screen_close
    endif   
    if grealgameviewstate=1
     gosub _screen_control
     sync
    endif
    `
    rem CORE : LOAD GAME DATA
    gosub _ai_reset
    gosub _ai_scanfornewscriptsonly
    gosub _main_game_loadgamedata
    `
    rem Only play if not building the executable
    if gcompilestandaloneexe=1
     `
     rem First action of core is to finishing loading of level
     gosub _load_game_scene
     gosub _main_game_freeleveldata
     `
     rem Review FPI screens
     gosub _screen_game_init
     gosub _screen_levelcomplete_init
     gosub _screen_gameover_init
     `
     rem Will load all levels to gather all files required for standalone
     inc level : if level>glevelmax then looplevel=0
     `
    else
     `
     rem First action of core is to finishing loading of level
     gosub _load_game_scene
     `
     rem Repeat an arema game
     repeatsamelevel=0
     repeat
      `
      rem Flag to control the repeat (multiaplayer)
      if gmultiplayergame=1
       if repeatsamelevel<>0
        rem Game has been repeated, so reset some small elements to reproduce exact restart (quicker than reload)
        gosub _multiplayer_repeatresetgame
        rem Reset flag for another new game
        repeatsamelevel=0
       else
        rem copy entire entityelement states at start (for repeat renewgame)
        tcopyorrestart=0 : gosub _gun_resetgunsettings
        tcopyorrestart=0 : gosub _entity_resetentitiestorestartstates
       endif
      endif
      `
      rem Prepare Game HUD After Loading
      gosub _screen_close
      gosub _screen_game_init
      `
      rem Give entities a blast of logic
      rem (but after HUD-creation of status-panels) (entAI adds HUDS)
      gosub _entity_blastinitentities
      `
      rem [OPTIONAL] saveload data overwrite default level settings
      if loadsavedlevel$<>""
       gosub _saveload_retrievesavedata
       loadsavedlevel$=""
      endif
      `
      rem X10 - this ensures physics calculations only start from here
      gosub _physics_ensurephysicsisreset
      `
      rem X10 - clear ghost run values ( can quit out or be killed mid-ghost run )
      if gghostrunmode=1 then ghostrunstage=0 : ghostrunmarkerindex=0
      `
      rem X10 - 071007 - capture x10 effect settings in case testgame messes them up
      if gtestgamemodefromeditor=1
       dim storex10effectmenu(20)
       for t=0 to 20 : storex10effectmenu(t)=x10effectmenu(t) : next t
      endif
      `
      rem CORE : PLAY LEVEL
      controlSPACE=0
      controlESCAPE=2
      showgamemenu=0
      levelwon=0
      startofgametime=timer()
      continueokay=0
      gamewarmupcount=30
      while continueokay=0
       if showgamemenu=0
        gosub _main_game_core
       else
        if gmultiplayergame=1 then gosub _main_game_core
        gosub _screen_control
        rem V110 - 080110 - prevent ODE jumping on game pause
        `if len(loadsavedlevel$)<2 then sync : gosub _physics_updatesmall
        if len(loadsavedlevel$)<2 then sync
        if showgamemenu=0 then ode update 0.001
       endif
      endwhile
      controlSPACE=1
      controlESCAPE=0
      `
      rem Any exit of level must terminate key events (no matter if test or real)
      if gvideofootagecapture<>0
       rem ends possible video capture (and prevents crash)
       gvideofootagecapture=0 : set capture mode 0 : ghidehudgraphics=0
      endif
      `
      rem If arena, pop up game win/lose screens (and repeat game choice)
      if gtestgamemodefromeditor<>0
       `
       rem Quick Exit from test arena mode
       repeatsamelevel=0
       `
      else
       `
       if gmultiplayergame=1
        `
        rem Stop ALL sounds from game
        for s=1 to 65535 : if sound exist(s)=1 : stop sound s : endif : next s
        `
        rem Ensure mouse button released totally
        while mouseclick()<>0 : sync : endwhile
        `
        rem X10 - 291007 - hide the HUDS that are visible (to restore later)
        gosub _ai_hud_hideandstore
        `
        rem ARENA GAME FINISHED
        rem levelwon (0-lost,1-won,2-skip)
        if levelwon=0 or levelwon=1
         if levelwon=0 then gosub _screen_gameover_init
         if levelwon=1 then gosub _screen_levelcomplete_init
         continueokay=0
         while continueokay=0
          gosub _screen_control
          sync
         endwhile
        endif
        `
        rem X10 - 291007 - show the HUDS that we hid (to restore for game session)
        gosub _ai_hud_showandrestore        
        `
        rem Absolutely leave leveloop after arena game
        looplevel=0
        `
       else
        `
        rem SINGLE PLAYER GAME FINISHED
        rem Record any player states
        gosub _player_savestate
        `
       endif
       `
      endif
      `
      rem Close down all HUDs
      gosub _screen_close
      `
     rem if AI has chosen to repeat level, repeatsamelevel will be set to 1
     until repeatsamelevel=0
     `
     rem CORE : FREE LEVEL DATA
     if gtestgamemodefromeditor<>0
      rem if test game, leave and let heap be removed entirely
      levelwon=2
      rem but multiplayer still needs freeing manually (or crash)
      if gmultiplayergame<>0 then gosub _multi_free
     else
      rem level free, or game free
      leavegamedataalone=1
      rem game free instead (removes usually retained AI and WEAPON arrays, etc)
      if levelwon=0 or levelwon=2 or (levelwon=1 and level+1>glevelmax)
       leavegamedataalone=0
      endif
      gosub _main_game_freeleveldata
     endif
     `
     rem If single player, do gameover/complete/nextlevel
     if gmultiplayergame=0
      `
      if levelwon=0
       `
       rem Game Over
       continueokay=0
       gosub _screen_gameover_init
       while continueokay=0
        gosub _screen_control
        sync
       endwhile
       gosub _screen_close
       `
       rem End level loop
       looplevel=0
       `
      endif
      if levelwon=1
       `
       rem Next level
       inc level : if level>glevelmax then levelwon=2
       `
      endif
      if levelwon=2
       `
       rem Game Complete
       if level>1 and level>glevelmax and gtestgamemodefromeditor=0
        continueokay=0
        gosub _screen_levelcomplete_init
        while continueokay=0
         gosub _screen_control
         sync
        endwhile
        gosub _screen_close
       endif
       `
       rem Level Quit - end level loop
       looplevel=0
       `
      endif
     endif
     `
    endif
    `
    rem TestGameFromEditor Mode
    if grealgameviewstate=0 and gcompilestandaloneexe=0
     rem Always terminate after the level has been won/lost
     looplevel=0 : loopapp=0
    endif
    `
   endwhile
   `
   rem QUICK-TEST-MODE : Leave after one pass
   if grealgameviewstate=0
    rem If no RESTARTING TEST GAME
    if grestarttestgame=1
     rem we want to restart
     rem lee - 230807 - will require some serious extra code to do this properly!
     loopapp=1
    else
     loopapp=0
    endif
   endif
   `
  endif
  `
 endwhile
 `
 rem Instruct Map Editor To Relaunch and Reload Settings
 if gtestgamemodefromeditor=1
  rem Inform user of potentiall ylong delay while unloading
  `x9 set current bitmap 0
  remstart 
  old X9 programmer art text prompt
  set text font "Verdana" : set text size 24 : ink rgb(255,255,255),0
  for sss=0 to 3
   center text screen width()/2,screen height()/2,strarr$(379)
   sync
  next sss
  remend
  rem X10 added now processmessages removed from syncon 
  sync off
  `
  rem X10 save header at end of test game (contains menu value settings)
  if gtestgamemodefromeditor=1
   if waterisbelowplayer=2
    rem X10 - 071007 - do not save x10 menu values (underwater transition messed them up)
    rem so restore from before we entered the test game
    for t=0 to 20 : x10effectmenu(t)=storex10effectmenu(t) : next t
   endif
  endif
  x10effectmenu(19)=1 : rem flag effect values to be retained in next session
  headername$="header(new).dat" : gosub _mapfile_savemap_justheader
  ` 
  rem TestGameFromEditor Mode
  open file map 1, "FPSEXCHANGE"
  set file map string$ 1, 1000, "bin\FPSC-MapEditor.exe"
  set file map string$ 1, 1256, "-r"
  set file map dword 1, 994, 0
  set file map dword 1, 924, 1
  wait for file map event 1
  close file map 1
  rem Terminate
  timestampactivity(0,"Test Game Delete Exit")
  end
 endif
 `
return

