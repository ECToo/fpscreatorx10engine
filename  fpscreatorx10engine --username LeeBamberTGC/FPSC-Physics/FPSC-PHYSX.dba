rem
rem PHYSX specific code
rem

rem Special DarkPHYSICS Edition which uses a new scaling system
rem so that a 100x100x100 simulation in PHYSX is actually 1x1x1
`phy set global scaling 100
`phy make rigid body static mesh
`phy make rigid body dynamic box
`phy make rigid body dynamic sphere
`phy set rigid body linear velocity

rem Flag to enable/disable PHYSX EDITION (set in FPSC-Full.DBA)
rem physxedition=1

_phy_init:
 `
 rem start physics engine
 if physxedition=1
  rem start engine
  phy enable debug
  phy start
  rem set timing to variable, max capped at 60fps
  phy set timing 1.0/60.0,8,1
  rem create a solid material
  phy make material 1,"solidnonbounce"
  phy set material restitution 1,0.01
  phy set material static friction 1,1.0
  phy set material dynamic friction 1,0.75
  phy set material restitution combine 1,1
  phy build material 1
 endif
 `
return

_phy_update:
 `
 rem update physics engine
 if physxedition=1
  phy update
 endif
 `
return

_phy_close:
 `
 rem end physics simulation
 if physxedition=1
  phy delete material 1  
  phy end
 endif
 `
return

_phy_collisionmessages_eat:
 `
 rem eat unused messages from stack
 if physxedition=1
  rem no collision stack, lists are internal
 endif
 `
return

_phy_universe:
 `
 rem Add universe to physx scene (physicsuniverseobj)
 if physxedition=1
  phy make rigid body static mesh physicsuniverseobj,1
 endif
 `
return

_phy_pseudostaticentity:
 if physxedition=1
`  ode create dynamic box tobj : ode set response tobj,2 : ode set gravity tobj,0
  phy make rigid body dynamic box tobj
 endif
return
_phy_characterentity:
 if physxedition=1
`  ode create dynamic box tobj,tcharobjsizex#,tcharobjsizey#,tcharobjsizez#
  phy make rigid body dynamic box tobj
 endif
return
_phy_dynamicentity:
 `
 rem Add specified object to physx scene
 if physxedition=1
  `
  rem physics shape
  if entityprofile(entid).collisionmode=3
   phy make rigid body dynamic box tobj `cylinder
  else
   if entityprofile(entid).collisionmode=4
    phy make rigid body dynamic sphere tobj
   else
    phy make rigid body dynamic box tobj
   endif
  endif
  `
 endif
 `
return
_phy_rotateentity:
 if physxedition=1
`  ode set body rotation tobj,0,entityelement(e).ry,0
 endif
return
_phy_removeentity:
 rem Remove object from simulation (ttobj)
 if physxedition=1
  phy delete rigid body ttobj
 endif
return
_phy_dynamicvelocity:
 `
 rem Move object in physx scene
 if physxedition=1
  tvel#=tvel*2.0
  if tvel<>0
   tvelx#=newxvalue(0,entityelement(e).ry,tvel#)
   tvelz#=newzvalue(0,entityelement(e).ry,tvel#)
   tangle#=sin(tangle)*tvel#
   tvelx#=tvelx#*cos(tangle)
   tvelz#=tvelz#*cos(tangle)
   phy set rigid body linear velocity tobj,tvelx#,tangle#,tvelz#
  endif
  if entityelement(e).eleprof.rotatethrow<>0
   trotate#=entityelement(e).eleprof.rotatethrow/10.0
   phy set rigid body angular velocity tobj,trotate#,0,trotate#
  endif
 endif
 `
return
_phy_nudgeentity:
 if physxedition=1
`  ode set active phya,1
 endif
return
_phy_nudgeentityup:
 if physxedition=1
`      ode set linear velocity ttobj,0,10,0
 endif
return
_phy_gravityentityoff:
 if physxedition=1
`   ode set gravity ttobj,0
 endif
return
_phy_gravityentityon:
 if physxedition=1
`   ode set gravity ttobj,1
 endif
return
_phy_getentityvelocity:
 if physxedition=1
`    oldvelx#=ODE GET BODY LINEAR VELOCITY X(ttobj)*0.97
`    oldvely#=ODE GET BODY LINEAR VELOCITY Y(ttobj)*0.97
`    oldvelz#=ODE GET BODY LINEAR VELOCITY Z(ttobj)*0.97
 endif
return
_phy_setentityvelocity:
 if physxedition=1
`   ode set linear velocity ttobj,oldvelx#,oldvely#,oldvelz#
 endif
return
_phy_applyentityforce:
 if physxedition=1
 `ttobj
`   if twithpointforce=1
`    ode add force ttobj,tdx#*4,tdy#*4,tdz#*4,tpx#,tpy#,tpz#
`   else
`    tda#=atanfull(tdx#,tdz#)
`    ode set linear velocity ttobj,tdx#,tdy#,tdz#
`    tspinforce#=tbulletforce#/100.0
`    if tspinforce#>1.0 then tspinforce#=1.0
`    if tspinforce#<-1.0 then tspinforce#=-1.0
`    ode set angular velocity tobj,sin(tda#)*(2.5*tspinforce#),0,cos(tda#)*(2.5*tspinforce#)
`   endif
 endif
return
_phy_entitydrivenphysics:
 if physxedition=1
 `ttobj
`   ode set linear velocity ttobj,tmvx#*2,tmvy#*4,tmvz#*2
`   if entityelement(todee).norotate=0
`    ode set body rotation todeobj,0,entityelement(todee).ry,0
`   else
`    ode set body rotation todeobj,0,0,0
`   endif
 endif
return
_phy_entitydrivenstaticphysics:
 if physxedition=1
`ttobj
`  if entityelement(todee).norotate=0
`   ode set body rotation todeobj,0,entityelement(todee).ry,0
`  else
`   ode set body rotation todeobj,0,0,0
`  endif
 endif
return

_phy_getcollisionmessage:
 if physxedition=1
  physicscollisionmessage=0
`  physicscollisionmessage=ODE COLLISION MESSAGE EXISTS()
`  if physicscollisionmessage=1
`   ODE COLLISION GET MESSAGE
`   phya=ODE GET OBJECT A() : phyb=ODE GET OBJECT B()
`  endif
 endif
return

_phy_getvelocitya:
 if physxedition=1
`    phyvelocity#=abs(ODE GET OBJECT A VELOCITY X())+abs(ODE GET OBJECT A VELOCITY Y()/4)+abs(ODE GET OBJECT A VELOCITY Z())
`    phyvelocity#=phyvelocity#+abs(ODE GET OBJECT A ANGULAR VELOCITY X())+abs(ODE GET OBJECT A ANGULAR VELOCITY Y())+abs(ODE GET OBJECT A ANGULAR VELOCITY Z())
`    if bangobj<>physicsplayerborble
`     bangcontact=ODE GET OBJECT A CONTACT()
`     if bangcontact<>0
`      phyfloorstop#=ODE GET OBJECT A VELOCITY Y()
`      if phylastfloorstop#(bangobj)<1 and phyfloorstop#>-1
`       phyhorizontalscrape=1
`      endif
`      phylastfloorstop#(bangobj)=phyfloorstop#
`     endif
`    endif
  phyvelocity#=0
  if bangobj<>physicsplayerborble
   bangcontact=0
   if bangcontact<>0
    phyfloorstop#=0
    if phylastfloorstop#(bangobj)<1 and phyfloorstop#>-1
     phyhorizontalscrape=1
    endif
    phylastfloorstop#(bangobj)=phyfloorstop#
   endif
  endif
 endif
return

_phy_getvelocityb:
 if physxedition=1
`    phyvelocity#=abs(ODE GET OBJECT B VELOCITY X())+abs(ODE GET OBJECT B VELOCITY Y()/4)+abs(ODE GET OBJECT B VELOCITY Z())
`    phyvelocity#=phyvelocity#+abs(ODE GET OBJECT B ANGULAR VELOCITY X())+abs(ODE GET OBJECT B ANGULAR VELOCITY Y())+abs(ODE GET OBJECT B ANGULAR VELOCITY Z())
 `  if bangobj<>physicsplayerborble
 `   bangcontact=ODE GET OBJECT B CONTACT()
`    if bangcontact<>0
`     phyfloorstop#=ODE GET OBJECT B VELOCITY Y()
`     if phylastfloorstop#(bangobj)<1 and phyfloorstop#>-1
`      phyhorizontalscrape=1
`     endif
`     phylastfloorstop#(bangobj)=phyfloorstop#
`    endif
`   endif
  phyvelocity#=0
  if bangobj<>physicsplayerborble
   bangcontact=0
   if bangcontact<>0
    phyfloorstop#=0
    if phylastfloorstop#(bangobj)<1 and phyfloorstop#>-1
     phyhorizontalscrape=1
    endif
    phylastfloorstop#(bangobj)=phyfloorstop#
   endif
  endif
 endif
return

rem
rem Player Character Controller Physics
rem

_phy_plr_make:
 if physxedition=1
  ttx#=object position x(physicsplayerborble)
  tty#=object position y(physicsplayerborble)+2
  ttz#=object position z(physicsplayerborble)
  phy make capsule character controller physicsplayerborble,ttx#,tty#,ttz#, 20.0, 20.0, 1, 20.0, 50.0
 endif
return
_phy_plr_move:
 if physxedition=1
  tmovespeed#=abs(camvelx#)+abs(camvelz#)
  tmoveangle#=atanfull(camvelx#,camvelz#)
  rotate object physicsplayerborble,0,tmoveangle#,0
  realtmovespeed#=tmovespeed#/1.5
  phy move character controller physicsplayerborble,realtmovespeed#,timeelapsed#
 endif
return
_phy_plr_jump:
 if physxedition=1
  phy jump character controller physicsplayerborble,camforcey#/2.5
 endif
return
_phy_plr_stop:
 if physxedition=1
  phy move character controller physicsplayerborble,0
 endif
return
_phy_plr_delete:
 if physxedition=1
  phy delete character controller physicsplayerborble
 endif
return
_phy_plr_getmotion:
 if physxedition=1
  tmotionx#=phy get character controller linear velocity x(physicsplayerborble)
  tmotiony#=phy get character controller linear velocity y(physicsplayerborble)
  tmotionz#=phy get character controller linear velocity z(physicsplayerborble)
 endif
return
_phy_plr_gravityon:
 if physxedition=1
`  ode set gravity physicsplayerborble,1
 endif
return
_phy_plr_gravityoff:
 if physxedition=1
`  ode set gravity physicsplayerborble,0
 endif
return
_phy_plr_pickup:
 if physxedition=1
`   ode set body rotation camerapicked,-1,-1,-1 : rem special hack to reset GRAB rotation matrix feature
`   ode set body rotation camerapicked,0,0,0
`   rem object reduces mess so not pushing other objects around (inc player)
`   ode set body mass camerapicked,entityelement(camerapickede).eleprof.phyweight/10.0
`   rem player takes on mass of object
`   ode set body mass physicsplayerborble,physicsplayerweight#+entityelement(camerapickede).eleprof.phyweight
 endif
return
_phy_plr_carry:
 if physxedition=1
  holdangley#=camera angle y(playercam)+bendarm#
  lastholdx#=holdx# : lastholdy#=holdy# : lastholdz#=holdz#
  holdx#=newxvalue(camerapositionx,holdangley#,(camerareach#+camerareachatrun#)-armretract#)
  holdy#=newxvalue(camerapositiony-(object size(camerapicked)/3.0),0-camera angle x(playercam),(camerareach#+camerareachatrun#)-armretract#)-((entityelement(camerapickede).eleprof.phyweight/100.0)*(1.0-cameradampen#))
  holdz#=newzvalue(camerapositionz,holdangley#,(camerareach#+camerareachatrun#)-armretract#)
  tangle#=wrapvalue(camera angle y(playercam)-camerapickedangle#)
`  ode set body rotation camerapicked,0,tangle#,0
  bendspeed#=4.0
  tholdforcex#=(holdx#-object position x(camerapicked))*bendspeed#
  tholdforcey#=(holdy#-object position y(camerapicked))*bendspeed#
  tholdforcez#=(holdz#-object position z(camerapicked))*bendspeed#
  rem if arm is bend to far, drop item with zero velocity
  if abs(bendarm#)>50 then camerapickeddrop=1 : tholdforcex#=0 : tholdforcey#=0 : tholdforcez#=0
`  ode set linear velocity camerapicked,tholdforcex#,tholdforcey#,tholdforcez#
 endif
return
_phy_plr_dropvelocity:
 if physxedition=1
`    ode set linear velocity camerapicked,tdx#,tdy#,tdz#
    if entityelement(camerapickede).eleprof.rotatethrow<>0
     trotate#=entityelement(camerapickede).eleprof.rotatethrow
`     ode set angular velocity camerapicked, ((rnd(1)*2.0)-1.0)*trotate#, 0, ((rnd(1)*2.0)-1.0)*trotate#
    endif
 endif
return
_phy_plr_dropmass:
 if physxedition=1
`   rem restore object max
`   ode set body mass camerapicked,entityelement(camerapickede).eleprof.phyweight
`   rem player restores mass
`   ode set body mass physicsplayerborble,physicsplayerweight#
 endif
return
